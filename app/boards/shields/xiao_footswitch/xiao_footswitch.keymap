

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Mode layer numbers
#define LAYER_000 0
#define LAYER_001 1
#define LAYER_010 2
#define LAYER_011 3
#define LAYER_100 4
#define LAYER_101 5
#define LAYER_110 6
#define LAYER_111 7

// Key bindings for different modes
#define L0_HOLD     LEFT_ARROW
#define L0_TAP      RIGHT_ARROW

#define L1_HOLD     UP_ARROW
#define L1_TAP      DOWN_ARROW

#define L2_HOLD     C_VOLUME_UP
#define L2_TAP      C_VOLUME_DOWN

#define L3_HOLD     C_AC_COPY
#define L3_TAP      C_AC_PASTE

#define L4_HOLD     C_AC_REDO
#define L4_TAP      C_AC_UNDO

#define L5_HOLD     C_PLAY_PAUSE
#define L5_TAP      C_PAUSE

#define L6_HOLD     C_BRIGHTNESS_INC
#define L6_TAP      C_BRIGHTNESS_DEC

#define L7_HOLD     A
#define L7_TAP      B

#define HOLD_TIME 300

&mt {
    tapping-term-ms = <HOLD_TIME>;
};

/ {

    macros {
        // Simple macros that call BT_CLR and BT_SEL 0 respectively, so they can be used in a hold-tap
        macro_bt_clr: macro_bt_clr {
            label = "ZM_macro_bt_clr";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_CLR>;
        };
        macro_bt_sel0: macro_bt_sel0 {
            label = "ZM_macro_bt_sel0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0>;
        };
    };

    behaviors {
        // bt_ht: Hold bluetooth button to clear profile, tap to select profile 0
        bt_ht: bluetooth_hold_tap {
           compatible = "zmk,behavior-hold-tap";
           label = "BLUETOOTH_HOLD_TAP";
           #binding-cells = <2>;
           tapping-term-ms = <2000>;
           bindings = <&macro_bt_clr &macro_bt_sel0>;
        };
        // bluetooth_tapdance: number of taps = select profile. hold button = clear profile
        bluetooth_tapdance: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&bt_ht 0 0>, <&bt BT_SEL 1>, <&bt BT_SEL 2>, <&bt BT_SEL 3>, <&bt BT_SEL 4>;
        };
    };

    // Using conditional layers to switch between different modes.
    // Layer 001, 010, 100 are directly activated from layer 000 by "pressing" the button (/flipping the switch)
    // if multiple of those layers are active, conditional layers activate the combination of those.
    // Priorisation is handled by the ordering of layers (probably), so since 111 is last, it always takes precendent.
    conditional_layers {
        compatible = "zmk,conditional-layers";
        cond_011 {
            if-layers = <LAYER_001 LAYER_010>;
            then-layer = <LAYER_011>;
        };
        cond_110 {
            if-layers = <LAYER_100 LAYER_010>;
            then-layer = <LAYER_110>;
        };
        cond_101 {
            if-layers = <LAYER_100 LAYER_001>;
            then-layer = <LAYER_101>;
        };
        cond_111 {
            if-layers = <LAYER_100 LAYER_010 LAYER_001>;
            then-layer = <LAYER_111>;
        };
    };

    // Key 1 = mod-tap for holding and tapping the pedal
    // Key 2 = Bluetooth config (tap = select, hold = clear)
    // Key 3-5 = Mode select
    // Key 1 is redefined in each layer (= for each mode), but keys 2-5 are only defined in layer_000, transparent everywhere else.
    keymap {
        compatible = "zmk,keymap";
        layer_000 {
            bindings = <
                &mt L0_HOLD L0_TAP
                &bluetooth_tapdance
                &mo LAYER_100
                &mo LAYER_010
                &mo LAYER_001
            >;
        };
        layer_001 {
            bindings = <
                &mt L1_HOLD L1_TAP
                &trans &trans &trans &trans
            >;
        };
        layer_010 {
            bindings = <
                &mt L2_HOLD L2_TAP
                &trans &trans &trans &trans
            >;
        };
        layer_011 {
            bindings = <
                &mt L3_HOLD L3_TAP
                &trans &trans &trans &trans
            >;
        };
        layer_100 {
            bindings = <
                &mt L4_HOLD L4_TAP
                &trans &trans &trans &trans
            >;
        };
        layer_101 {
            bindings = <
                &mt L5_HOLD L5_TAP
                &trans &trans &trans &trans
            >;
        };
        layer_110 {
            bindings = <
                &mt L6_HOLD L6_TAP
                &trans &trans &trans &trans
            >;
        };
        layer_111 {
            bindings = <
                &mt L7_HOLD L7_TAP
                &trans &trans &trans &trans
            >;
        };
    };
};